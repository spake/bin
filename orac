#!/usr/bin/env python2.7

# please note: if you are on windows, you don't deserve to use this
# also it won't work

import getpass
import httplib
import os
import re
import shutil
import signal
import sys
import subprocess
import time
import urllib

LANGUAGES = ['c', 'cpp', 'py']
DEFAULT_LANGUAGE = 'cpp'

SCHEMES = ['in.txt', '.in', 'stdin']
DEFAULT_SCHEME = 'in.txt'

TIMEOUT = 2

COOKIE_PATH = os.path.expanduser('~/.orac_cookie')

def get_cookie():
    if os.path.exists(COOKIE_PATH):
        return open(COOKIE_PATH, "r").read().strip()
    return None

def set_cookie(cookie):
    f = open(COOKIE_PATH, "w")
    f.write(cookie)
    f.close()

def login():
    try:
        username = raw_input('Username: ')
        password = getpass.getpass()
    except KeyboardInterrupt:
        print
        return False

    if not (len(username) and len(password)):
        print 'Please enter both a username and a password, or ^C to abort.'
        print
        return login()

    params = {'login_username': username, 'login_password': password, 'login_submit': 'Log in'}

    conn = httplib.HTTPConnection('orac.amt.edu.au')
    conn.request('POST', '/cgi-bin/train/index.pl', urllib.urlencode(params))
    res = conn.getresponse()
    if res.status == 302:
        # extract cookies
        cookie_header = res.getheader('set-cookie')
        cookie = '; '.join(re.findall('(aioc_.*?=.*?);', cookie_header))
        set_cookie(cookie)
        result = True
    else:
        result = False
    conn.close()
    return result

def check_cookie():
    cookie = get_cookie()
    if not cookie:
        return False
    conn = httplib.HTTPConnection('orac.amt.edu.au')
    conn.request('GET', '/cgi-bin/train/hub.pl', '', {'Cookie': cookie})
    res = conn.getresponse()
    result = res.status == 200
    conn.close()
    return result

class Alarm(Exception):
    pass

def alarm_handler(signum, frame):
    raise Alarm

def usage():
    print 'orac automator'
    print 'by george caley, https://github.com/spake'
    print
    print 'usage:'
    print '%s <command> <command args> <flags>' % sys.argv[0]
    print
    print 'commands:'
    print 'test <name>: runs unit tests using cases named <name>in.n and <name>out.n, n >= 0'
    print 'submit <name> <set> <id>: submits a solution to orac'
    print
    print 'flags:'
    print '-l: specifies a language to use for submission and testing. accepted languages are %s' % ', '.join(LANGUAGES)
    print '-t: specifies a testing scheme to use for testing. accepted schemes are %s' % ', '.join(SCHEMES)
    exit(0)

def usage_assert(condition):
    if not condition:
        usage()

def parse_flags(args):
    accepted = ['-l', '-t']
    usage_assert(len(args) % 2 == 0)
    flags = dict()
    for i in xrange(0, len(args), 2):
        key, value = args[i], args[i+1]
        usage_assert(key in accepted)
        flags[key] = value
    return flags

usage_assert(len(sys.argv) > 1)

command = sys.argv[1]
if command == 'test':
    usage_assert(len(sys.argv) >= 3)

    if len(sys.argv) >= 4:
        flags = parse_flags(sys.argv[3:])
    else:
        flags = list()

    if '-l' in flags:
        lang = flags['-l']
        usage_assert(lang in LANGUAGES)
    else:
        lang = DEFAULT_LANGUAGE

    if '-t' in flags:
        scheme = flags['-t']
        usage_assert(scheme in SCHEMES)
    else:
        scheme = DEFAULT_SCHEME

    name = sys.argv[2]

    if lang == 'c' or lang == 'cpp':
        source_filename = '%s.%s' % (name, 'c' if lang == 'c' else 'cpp')
        exec_filename = '%s.o' % name
        compiler = 'gcc' if lang == 'c' else 'g++'
        flags = '-m32 -O2 -lm'
        print '>>> Compiling %s' % source_filename
        result = subprocess.call('%s %s %s -o %s' % (compiler, flags, source_filename, exec_filename), shell=True)
        if result != 0:
            print
            print 'Error during compilation, testing aborted.'
            exit(1)
        exec_command = './%s' % exec_filename
    elif lang == 'py':
        source_filename = '%s.py' % name
        if not os.path.exists(source_filename):
            print '%s doesn\'t exist, testing aborted.' % source_filename
            exit(1)
        exec_command = 'python %s' % source_filename

    print '>>> Running tests'

    n = 0
    successes = 0
    failures = 0
    if scheme == 'in.txt' or scheme == 'stdin':
        exec_in = '%sin.txt' % name
        exec_out = '%sout.txt' % name
    elif scheme == '.in':
        exec_in = '%s.in' % name
        exec_out = '%s.out' % name
    while True:
        in_file = '%sin.%d' % (name, n)
        out_file = '%sout.%d' % (name, n)

        if os.path.exists(in_file) and os.path.exists(out_file):
            if scheme == 'in.txt' or scheme == '.in':
                shutil.copyfile(in_file, exec_in)
                command = exec_command
            elif scheme == 'stdin':
                command = '%s < %s > %s' % (exec_command, in_file, exec_out)
            proc = subprocess.Popen(command, shell=True)
            signal.signal(signal.SIGALRM, alarm_handler)
            signal.alarm(TIMEOUT)
            try:
                start_time = time.time()
                #_, _ = proc.communicate()
                proc.wait()
                running_time = time.time() - start_time
                signal.alarm(0)
            except KeyboardInterrupt:
                running_time = time.time() - start_time
                proc.kill()
                status = 'aborted'
                failures += 1
            except Alarm:
                running_time = TIMEOUT
                proc.kill()
                status = 'timeout'
                failures += 1
            else:
                result = proc.poll()
                if result != 0:
                    status = 'crashed'
                    failures += 1
                else:
                    exec_contents = open(exec_out, 'r').read().strip()
                    out_contents = open(out_file, 'r').read().strip()
                    if exec_contents == out_contents:
                        status = 'correct'
                        successes += 1
                    else:
                        status = 'incorrect'
                        failures += 1

            print '#%d: %s (%.3fs)' % (n, status, running_time)

            n += 1
        else:
            break

    if successes+failures == 0:
        print 'No tests found!'
    else:
        print
        print '%d successes, %d failures' % (successes, failures)
        print 'SCORE: %.0f%%' % (successes/float(successes+failures)*100)

elif command == 'submit':
    usage_assert(len(sys.argv) >= 5)

    name, problem_set, problem_id = sys.argv[2:5]

    if len(sys.argv) >= 6:
        flags = parse_flags(sys.argv[5:])
    else:
        flags = list()

    if '-l' in flags:
        lang = flags['-l']
        usage_assert(lang in LANGUAGES)
    else:
        lang = DEFAULT_LANGUAGE

    if lang == 'c':
        filename = '%s.c' % name
    elif lang == 'cpp':
        filename = '%s.cpp' % name
    elif lang == 'py':
        filename = '%s.py' % name

    if not os.path.exists(filename):
        print '%s does not exist, aborting.' % filename
        exit(1)

    cookie = get_cookie()
    if not cookie or not check_cookie():
        if not login():
            exit(1)
        cookie = get_cookie()

    print 'Logged in successfully.'
    data = open(filename, "r").read()
    print 'Submitting %s, %d bytes' % (filename, len(data))

    fields = {'problemid': problem_id, 'lang': lang, '.submit': 'Submit', 'set': problem_set}

    BOUNDARY = '---------070bff8a9e240b11ee6b41e7d92b41ba'

    lines = list()
    for key, value in fields.items():
        lines.append('--' + BOUNDARY)
        lines.append('Content-Disposition: form-data; name="%s"' % key)
        lines.append('')
        lines.append(value)
    lines.append('--' + BOUNDARY)
    lines.append('Content-Disposition: form-data; name="submitted_file"; filename="%s"' % filename)
    lines.append('Content-Type: text/plain')
    lines.append('')
    lines.append(data)
    lines.append('--' + BOUNDARY + '--')
    lines.append('')

    body = '\r\n'.join(lines)

    headers = {'Cookie': cookie, 'Content-Type': 'multipart/form-data; boundary=%s' % BOUNDARY}

    print
    print '>>> Sending request'
    conn = httplib.HTTPConnection('orac.amt.edu.au')
    conn.request('POST', '/cgi-bin/train/submission.pl', body, headers)
    res = conn.getresponse()
    if res.status == 200:
        print '>>> Waiting for response'
        response = ''
        while not response.endswith('</html>'):
            chunk = res.read().replace('\r', '').replace('\n', '')
            if len(chunk):
                response += chunk
        print '>>> Done'
        match = re.search('<pre>JUDGE<br>(.*?)</pre>', response)
        if match:
            print match.group(1).replace('<br>', '\n')
        else:
            print 'No testing results found in response.'
            print 'Dumping response to debug.txt'
            f = open('debug.txt', 'w')
            f.write(response)
            f.close()
    else:
        print 'Error: HTTP %d during submission' % res.status
    conn.close()
else:
    usage()
